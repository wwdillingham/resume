#!/bin/bash
#Dillingham
#OS Scripting 20083
#Lab 5 Task1

trap 'cd ..;' SIGHUP
trap 'echo $PWD; ls -l;' SIGINT
trap 'echo $$; sleep 5;' SIGTERM 
i=0
while true
do 
	i = `expr $i + 1`
	if [ $i -eq 500 ]
	then
		echo "Hey $USER, I am still running"
		THIS LINE WILL GENERATE AN ERROR
		i=0
	fi
done 2>$1/dev/null
#!/bin/bash
#Wesley Dillingham
#OS Scripting 20083
#lab 4 task 1


trap '
set `cat usermon.conf`
CHECKUSERS=$1
INTERVAL=$2
OUTPUTFILE=$3
NUMBACKUPS=$4
MAXUSERS=$5
ERRORFILE=$6
EMAILTO=$7
;' SIGHUP


echo "Check Users: $1"
echo "..... if I had completed this part of lab 4, the logicwould go here"
#!/bin/bash
#WEsley Dillingham
#OS Scripting 20083
#lab 5 task1
#manager for usermon.sh

. functions.sh

if [ $# -ne 1 ]
then
	echo "must specify -s -t or -r"
	exit 1
fi

if [ $1 = "-s" ]
then
	echo "will now start usermon.sh"
	Start usermon.sh
 
elif [ $1 = "-t" ]
then
	echo "Will now terminate usermon.sh"
	A=`cat usermon.PID`
	set $A
	THEPID=$1
	echo "The PID we will now terminate is $THEPID"
	Terminate usermon.sh $THEPID


elif [ $1 = "-r" ]
then
	echo "Will now Restart usermon.sh"
	A=`cat usermon.PID`
	set $A
	THEPID=$1
	Terminate usermon.sh $THEPID
	Start usermon.sh
else
	echo "Not a valid flag"
fi 

#!/bin/bash
#WEsley Dillingham
#OS Scripting 20083
#lab 5 task1
#manager for loop.sh

. functions.sh

if [ $# -ne 1 ]
then
	echo "must specify -s -t or -r"
	exit 1
fi

if [ $1 = "-s" ]
then
	echo "will now start loop.sh"
	Start loop.sh
 
elif [ $1 = "-t" ]
then
	echo "Will now terminate loop.sh"
	A=`cat loop.PID`
	set $A
	THEPID=$1
	echo "The PID we will now terminate is $THEPID"
	Terminate loop.sh $THEPID


elif [ $1 = "-r" ]
then
	echo "Will now Restart loop.sh"
	A=`cat loop.PID`
	set $A
	THEPID=$1
	Terminate loop.sh $THEPID
	Start loop.sh
else
	echo "Not a valid flag"
fi 

#!/bin/bash
#This is the script containing the shared functions, each function will be called by the manager
#$1 is the name of the script which is to be acted on $2 is the PID

Start ()
{
	sh $1&
}

Terminate ()
{
	 
	kill $2

}

#Restart is simply, first running Terminate and the running Start
#in the manager, the -r flag first calls the terminate function and then the start
#!/bin/bash
#Wesley Dillingham
#OS Scripting 20083
#lab 4 task 1
#Script name: Usermon.sh

touch usermon.PID
echo $$ > usermon.PID

set `cat usermon.conf`
CHECKUSERS=$1
INTERVAL=$2
OUTPUTFILE=$3
NUMBACKUPS=$4
MAXUSERS=$5
ERRORFILE=$6
EMAILTO=$7

echo "I didnt complete this part of lab4 but i bet something special should have been displayed here."
echo "The PID was $$"


#!/bin/bash
#Dillingham 20083
#lab 1 task 5
#script name loop.sh

touch loop.PID
echo $$ > loop.PID


i=0
while true
do
	i=`expr $i + 1`
	if [ $i -eq 2000 ]
	then
		echo "Hey, $USER, I am still running the PID is $$"
		THIS LINE WILL GENERATE AN ERROR
		i=0
	fi
done
